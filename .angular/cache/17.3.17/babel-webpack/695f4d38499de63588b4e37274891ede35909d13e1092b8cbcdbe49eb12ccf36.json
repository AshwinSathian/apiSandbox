{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./api-params.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./api-params.component.css?ngResource\";\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { MainService } from 'src/app/services/main.service';\nlet ApiParamsComponent = class ApiParamsComponent {\n  constructor(_mainService) {\n    this._mainService = _mainService;\n    this.newRequest = new EventEmitter();\n    this.endpoint = '';\n    this.selectedRequestMethod = 'GET';\n    this.requestMethods = ['GET', 'POST'];\n    this.availableDataTypes = ['String', 'Number', 'Boolean'];\n    this.requestBody = [{\n      key: '',\n      value: ''\n    }];\n    this.requestBodyDataTypes = [''];\n    this.requestHeaders = [{\n      key: 'Content-Type',\n      value: 'application/json'\n    }];\n    this.endpointError = '';\n    this.loadingState = false;\n  }\n  ngOnInit() {}\n  addItem(ctx) {\n    let context;\n    if (ctx === 'Body') {\n      context = this.requestBody;\n    } else if (ctx === 'Headers') {\n      context = this.requestHeaders;\n    }\n    context.push({\n      key: '',\n      value: ''\n    });\n    if (ctx === 'Body') {\n      this.requestBodyDataTypes.push('');\n    }\n  }\n  isAddDisabled(ctx) {\n    let context;\n    if (ctx === 'Body') {\n      context = this.requestBody;\n    } else if (ctx === 'Headers') {\n      context = this.requestHeaders;\n    }\n    if (context.length > 0) {\n      if (context[context.length - 1].key === '' || context[context.length - 1].value === '') {\n        return true;\n      }\n    }\n    return false;\n  }\n  removeItem(index, ctx) {\n    let context;\n    if (ctx === 'Body') {\n      context = this.requestBody;\n    } else if (ctx === 'Headers') {\n      context = this.requestHeaders;\n    }\n    context.splice(index, 1);\n  }\n  saveRequest(requestType) {\n    const requestObject = {\n      endpoint: this.endpoint,\n      method: this.selectedRequestMethod,\n      headers: this.constructObject('Headers')\n    };\n    if (requestType === 'POST') {\n      requestObject['body'] = this.constructObject('Body');\n    }\n    const transaction = this.indexedDB.transaction('pastRequests', 'readwrite');\n    const pastRequestsStore = transaction.objectStore('pastRequests');\n    pastRequestsStore.add(requestObject);\n  }\n  loadPastRequest(request) {\n    this.selectedRequestMethod = request.method;\n    this.endpoint = request.endpoint;\n    this.requestHeaders = this.deconstructObject(request.headers, 'Headers');\n    if (request.method === 'POST') {\n      this.requestBody = this.deconstructObject(request.body, 'Body');\n    }\n  }\n  deconstructObject(object, type) {\n    const objectArray = [];\n    switch (type) {\n      case 'Body':\n        {\n          Object.keys(object).forEach((objKey, index) => {\n            this.requestBodyDataTypes[index] = 'String';\n            const obj = {\n              key: objKey,\n              value: ''\n            };\n            objectArray.push(obj);\n          });\n          break;\n        }\n      case 'Headers':\n        {\n          Object.keys(object).forEach(objKey => {\n            const obj = {\n              key: objKey,\n              value: object[objKey]\n            };\n            objectArray.push(obj);\n          });\n          break;\n        }\n    }\n    return objectArray;\n  }\n  validateUrl(text) {\n    // tslint:disable-next-line: max-line-length\n    const urlRegExp = /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/gm;\n    return urlRegExp.test(text);\n  }\n  constructObject(ctx) {\n    let context;\n    if (ctx === 'Body') {\n      context = this.requestBody;\n    } else if (ctx === 'Headers') {\n      context = this.requestHeaders;\n    }\n    let constructedObject = {};\n    constructedObject = context.reduce((object, item) => {\n      object[item.key] = item.value;\n      return object;\n    }, {});\n    return constructedObject;\n  }\n  sendRequest() {\n    this.endpointError = '';\n    this.responseData = '';\n    this.responseError = '';\n    if (!this.endpoint) {\n      this.endpointError = 'Endpoint is a Required value';\n      return;\n    }\n    if (!this.validateUrl(this.endpoint)) {\n      this.endpointError = 'Please enter a valid URL';\n      return;\n    }\n    this.requestBody.forEach((item, index) => {\n      if (this.requestBodyDataTypes[index] === 'Number') {\n        item = Number(item);\n      }\n    });\n    this.loadingState = true;\n    switch (this.selectedRequestMethod) {\n      case 'GET':\n        {\n          this._mainService.sendGetRequest(this.endpoint, this.constructObject('Headers')).subscribe(data => {\n            this.loadingState = false;\n            this.responseData = JSON.stringify(data, undefined, 4);\n          }, error => {\n            this.loadingState = false;\n            this.responseError = JSON.stringify(error, undefined, 4);\n          });\n          break;\n        }\n      case 'POST':\n        {\n          this._mainService.sendPostRequest(this.endpoint, this.constructObject('Body'), this.constructObject('Headers')).subscribe(data => {\n            this.loadingState = false;\n            this.responseData = JSON.stringify(data, undefined, 4);\n          }, error => {\n            this.loadingState = false;\n            this.responseError = JSON.stringify(error, undefined, 4);\n          });\n          break;\n        }\n    }\n    this.saveRequest(this.selectedRequestMethod);\n    this.newRequest.emit();\n    this.selectedRequestMethod = 'GET';\n    this.endpoint = '';\n    this.requestBody = [{\n      key: '',\n      value: ''\n    }];\n    this.requestBodyDataTypes = [''];\n    this.requestHeaders = [{\n      key: 'Content-Type',\n      value: 'application/json'\n    }];\n    this.endpointError = '';\n  }\n  static {\n    this.ctorParameters = () => [{\n      type: MainService\n    }];\n  }\n  static {\n    this.propDecorators = {\n      openIDBrequest: [{\n        type: Input\n      }],\n      indexedDB: [{\n        type: Input\n      }],\n      newRequest: [{\n        type: Output\n      }]\n    };\n  }\n};\nApiParamsComponent = __decorate([Component({\n  selector: 'app-api-params',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ApiParamsComponent);\nexport { ApiParamsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}